{"version":3,"sources":["../../../source/test/library/transform-01.test.js"],"names":["DefaultParser","ModuleParser","FileSystem","Path","Test","Touch","DefaultTraverse","ModuleTraverse","Transform","Parse","Traverse","default","FilePath","_URL","fileURLToPath","import","meta","url","FolderPath","dirname","Require","_createRequire","test","sourcePath","targetPath","extname","notThrowsAsync","createModuleFromPath","true","pathExists","throwsAsync","option","utility","relative","resolve","content","readFile","ast","existsUtility","CallExpression","path","node","callee","name","arguments","length","type","is","value","ImportDeclaration","source","forEach","pathExistsSync"],"mappings":"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","sourcesContent":["import DefaultParser, * as ModuleParser from '@babel/parser'\nimport FileSystem from 'fs-extra'\nimport Path from 'path'\nimport Test from 'ava'\nimport Touch from 'touch'\nimport DefaultTraverse, * as ModuleTraverse from '@babel/traverse'\n\nimport { Transform } from '../../index.js'\n\nconst { 'parse': Parse } = DefaultParser || ModuleParser\nconst Traverse = DefaultTraverse.default || ModuleTraverse.default\nconst FilePath = __filePath\nconst FolderPath = Path.dirname(FilePath)\nconst Require = __require\n\nTest('createModuleFromPath(sourcePath, targetPath, option) using file', async (test) => {\n\n  let sourcePath = `${FolderPath}/resource/transform-01/file/00-content.pug`\n  let targetPath = `${FolderPath}/resource/transform-01/file/00-content${Path.extname(FilePath)}`\n\n  // succeeds writing target\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath))\n  test.true(await FileSystem.pathExists(targetPath))\n\n  // succeeds (but writes nothing) with no change to source\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath))\n\n  // fails to overwrite as 'flag' defaults to 'wx' with changed source \n  await Touch(sourcePath)\n  await test.throwsAsync(Transform.createModuleFromPath(sourcePath), { 'code': 'EEXIST'})\n\n  // succeeds to overwrite as 'flag' is 'w' with changed source \n  let option = { 'flag': 'w' }\n\n  await Touch(sourcePath)\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath, targetPath, option))\n\n  // succeeds to overwrite as 'flag' is 'w' with changed source, utility import is defined\n  let utility = Path.relative(Path.dirname(sourcePath), Require.resolve('../../library/utility.js'))\n  \n  option = { 'flag': 'w', 'utility': utility }\n\n  await Touch(sourcePath)\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath, targetPath, option))\n\n  let content = await FileSystem.readFile(targetPath, { 'encoding': 'utf-8' })\n  let ast = Parse(content, { 'sourceType': 'module' })\n\n  let existsUtility = false \n\n  Traverse(ast, {\n    CallExpression(path) {\n\n      if (path.node.callee.name === 'require' &&\n          path.node.arguments.length === 1 &&\n          path.node.arguments[0].type === 'StringLiteral') {\n\n        // test.log(`const Utility = require('${path.node.arguments[0].value}')`)\n        test.is(path.node.arguments[0].value, utility)\n\n        existsUtility = true\n\n      }\n\n    },\n    ImportDeclaration(path) {\n\n      // test.log(`import Utility from '${path.node.source.value}'`)\n      test.is(path.node.source.value, utility)\n\n      existsUtility = true\n\n    }\n  })\n\n  test.true(existsUtility)\n\n})\n\nTest('createModuleFromPath(sourcePath, targetPath, option) using folder', async (test) => {\n\n  let sourcePath = `${FolderPath}/resource/transform-01/folder`\n  let targetPath = [\n    `${FolderPath}/resource/transform-01/folder/00-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/folder/01-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/folder/02-content${Path.extname(FilePath)}`\n  ]\n\n  // succeeds writing target\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath))\n  targetPath.forEach((targetPath) => test.true(FileSystem.pathExistsSync(targetPath)))\n\n  // succeeds (but writes nothing) with no change to source\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath))\n\n  // fails to overwrite as 'flag' defaults to 'wx' with changed source \n  await Touch(`${sourcePath}/02-content.pug`)\n  await test.throwsAsync(Transform.createModuleFromPath(sourcePath), { 'code': 'EEXIST'})\n\n})\n\nTest('createModuleFromPath(sourcePath, targetPath, option) using sub-folder', async (test) => {\n\n  let sourcePath = `${FolderPath}/resource/transform-01/sub-folder`\n  let targetPath = [\n    `${FolderPath}/resource/transform-01/sub-folder/folder/00-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/sub-folder/folder/01-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/sub-folder/folder/02-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/sub-folder/00-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/sub-folder/01-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/sub-folder/02-content${Path.extname(FilePath)}`\n  ]\n\n  // succeeds writing target\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath))\n  targetPath.forEach((targetPath) => test.true(FileSystem.pathExistsSync(targetPath)))\n\n  // succeeds (but writes nothing) with no change to source\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath))\n\n  // fails to overwrite as 'flag' defaults to 'wx' with changed source \n  await Touch(`${sourcePath}/folder/02-content.pug`)\n  await test.throwsAsync(Transform.createModuleFromPath(sourcePath), { 'code': 'EEXIST'})\n\n})\n"],"file":"transform-01.test.js"}