{"version":3,"sources":["../../source/library/utility.js"],"names":["Convert","DefaultConvert","ModuleConvert","Utility","create","parameter","createNode","name","_name","_property","_childNode","length","Array","isArray","getNodeName","getNodeProperty","getNode","property","_attribute","attributes","map","Object","entries","filter","toLowerCase","forEach","value","test","IsNode","sort","leftName","rightName","localeCompare","node","previousIndex","previousNode","undefined","reduce","accumulator","currentNode","push","addNode","addAttribute","attribute","getAttributeName","getAttributeValue","currentValue","join","keys","key","addAndAttribute","object","fn","entry","convertToNode","pattern","source","tag","replace","eval"],"mappings":"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","sourcesContent":["import Create from 'hyperscript'\nimport Clone from 'clone'\nimport DefaultConvert, * as ModuleConvert from 'html-to-hyperscript'\nimport IsNode from 'is-node'\n\nconst { 'htmlToHs2': Convert } = DefaultConvert || ModuleConvert\n\nclass Utility {\n\n  static create(...parameter) {\n    // console.log(`Utility.create(...parameter)`)\n    // console.dir({ 'parameter': parameter }, { 'depth': null })\n    return Create(...parameter)\n  }\n\n  static createNode(name, ...parameter) {\n\n    let _name = name\n    let _property = {}\n    let _childNode = []\n\n    switch (parameter.length) {\n      case 0:\n        // _property = default\n        // _childNode = default\n        break\n      case 1:\n\n        switch (true) {\n          case typeof parameter[0] === 'string':\n            // _property = default\n            _childNode = [parameter[0]]\n            break\n          case Array.isArray(parameter[0]):\n            // _property = default\n            _childNode = parameter[0]\n            break\n          default:\n            _property = parameter[0]\n            // _childNode = default\n        }\n\n        break\n      default:\n\n        switch (true) {\n          case typeof parameter[1] === 'string':\n            _property = parameter[0]\n            _childNode = [parameter[1]]\n            break\n          default:\n            _property = parameter[0]\n            _childNode = parameter[1]\n        }\n\n    }\n\n    _name = this.getNodeName(_name)\n    _property = this.getNodeProperty(_property)\n    _childNode = this.getNode(_childNode)\n\n    return this.create(_name, _property, _childNode)\n\n  }\n\n  static getNodeName(name) {\n    return name\n  }\n\n  static getNodeProperty(property) {\n\n    let _property = Clone(property)\n    let _attribute = property.attributes ? Clone(property.attributes) : {}\n\n    // re-name selected property\n    let map = {\n      'class': 'className',\n      'colspan': 'colSpan',\n      'for': 'htmlFor',\n      'http-equiv': 'httpEquiv'\n    }\n\n    Object.entries(_property)\n      .filter(([name]) => name.toLowerCase() in map)\n      .forEach(([name, value]) => {\n        _property[map[name.toLowerCase()]] = value\n        delete _property[name]\n      })\n\n    // add selected property to _attribute and remove\n    Object.entries(_property)\n      .filter(([name]) => /^\\((.*?)\\)$/.test(name) ||\n                          (IsNode && /^data-(.*?)$/.test(name)) ||\n                          name === 'checked')\n      .forEach(([name, value]) => {\n        _attribute[name] = value\n        delete _property[name]\n      })\n\n    // convert _attribute to an array\n    // of objects if it isn't already\n    // and this is a NodeJS process\n    if (IsNode &&\n        !Array.isArray(_attribute)) {\n\n      _attribute = Object.entries(_attribute)\n        .sort(([leftName], [rightName]) => leftName.localeCompare(rightName))\n        .map(([name, value]) => ({ 'name': name, 'value': value }))\n\n    }\n\n    // assign _attribute to ...\n    //   .attributes if this is a NodeJS process\n    //   .attrs otherwise\n    _property[IsNode ? 'attributes' : 'attrs'] = _attribute\n\n    return _property\n\n  }\n\n  static getNode(node) {\n\n    let previousIndex = -1\n    let previousNode = undefined\n\n    node = node.reduce((accumulator, currentNode) => {\n\n      if (typeof currentNode === 'string' &&\n          typeof previousNode === 'string') {\n        accumulator[previousIndex] += currentNode\n      } else {\n        accumulator.push(currentNode)\n        previousIndex++\n      }\n\n      previousNode = currentNode\n      return accumulator\n        \n    }, [])\n\n    return node\n\n  }\n\n  static addNode(value, node) {\n    node.push(...(Array.isArray(value) ? value : [value]))\n  }\n\n  static addAttribute(name, value, attribute) {\n\n    if (typeof value === 'boolean' &&\n        value === false) {\n      // do nothing\n    } else {\n\n      name = this.getAttributeName(name)\n      value = this.getAttributeValue(name, value, attribute[name])\n\n      if (value !== undefined) {\n        attribute[name] = value\n      }\n\n    }\n\n  }\n\n  static getAttributeName(name) {\n    return name\n  }\n\n  static getAttributeValue(name, value, currentValue) {\n\n    if (typeof value === 'boolean') {\n      value = value ? name : false\n    } else if (typeof value === 'string') {\n      value = currentValue ? `${currentValue} ${value}` : value\n    } else if (Array.isArray(value)) {\n      value = currentValue ? `${currentValue} ${value.join(' ')}` : value.join(' ')\n    } else {\n\n      switch (name.toLowerCase()) {\n        case 'class':\n          value = Object.keys(value)\n            .filter((key) => value[key])\n            .join(' ')\n          break\n        // case 'style':\n        //   value = Object.keys(value)\n        //     .map((key) => `${key}:${value[key]};`)\n        //     .join('')\n        //   break\n      }\n\n    }\n\n    return value === '' ? undefined : value\n\n  }\n\n  static addAndAttribute(object, attribute) {\n    Object.entries(object).forEach(([ name, value ]) => this.addAttribute(name, value, attribute))\n  }\n\n  static forEach(value, fn) {\n                \n    if (Array.isArray(value)) {\n\n      value.forEach(fn)\n      return value.length\n\n    } else {\n\n      let entry = Object.entries(value)\n\n      entry.forEach(([ name, value ]) => fn(value, name))\n      return entry.length\n\n    }\n\n  }\n\n  static convertToNode(value) {\n    // console.log('Utility.convertToNode(value)')\n    // console.dir({ 'value': value }, { 'depth': null })\n\n    let pattern = /^\\/\\/<!\\[CDATA\\[(.*?)\\/\\/\\]\\]>$/ims\n\n    if (pattern.test(value)) {\n      return value\n    } else {\n\n      let [source, tag] = Convert({ 'syntax': 'h', 'tabSize': 2 }, value)\n      // console.log(source)\n\n      if (tag.length > 0) {\n\n        let pattern = /h\\((.*?)\\)/gims\n\n        while (pattern.test(source)) {\n          source = source.replace(pattern, 'this.createNode($1)')\n        }\n\n        // console.log(source)\n        return eval(source)\n\n      } else {\n        return value\n      }\n\n    }\n\n  }\n\n}\n\nexport { Utility }"],"file":"utility.cjs"}