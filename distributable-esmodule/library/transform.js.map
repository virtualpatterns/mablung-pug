{"version":3,"sources":["../../source/library/transform.js"],"names":["DefaultBabel","ModuleBabel","DefaultLuxon","ModuleLuxon","ESLint","FileSystem","Filter","_Format","Is","JSON5","Lex","Link","Load","Match","Merge","Parse","Path","Package","BlockNode","UnrecognizedMessageTransformError","DateTime","Lint","Format","Babel","FilePath","_URL","fileURLToPath","import","meta","url","Require","_createRequire","Transform","getAstFromContent","content","option","ast","token","path","handleFilters","getSourceFromContent","blockNode","blockSource","getSource","source","local","_getLocalFromSource","getFunctionSourceFromContent","map","join","getFunctionFromContent","formatSource","fn","eval","getModuleSourceFromContent","userOption","defaultOption","name","version","utc","toFormat","relative","utility","getAstFromPath","readFile","getSourceFromPath","getFunctionSourceFromPath","getFunctionFromPath","getModuleSourceFromPath","createModuleFromPath","sourcePath","targetPath","statSync","isDirectory","dirname","basename","extname","sourceInformation","stat","_createModuleFromPath","flat","includePattern","item","readdir","promise","concat","filter","folder","isFile","file","reduce","isMatch","pattern","Promise","all","isCreated","pathExists","targetInformation","mtimeMs","toLowerCase","ensureDir","writeFile","encoding","flag","sourceIn","environment","configuration","parse","resolve","env","sourceOut","transformAsync","lint","result","lintText","messages","message","ruleId","match","not","null","exec","accumulator","undefined","Object","keys"],"mappings":"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","sourcesContent":["import DefaultBabel, * as ModuleBabel from '@babel/core'\nimport DefaultLuxon, * as ModuleLuxon from 'luxon'\nimport ESLint from 'eslint'\nimport FileSystem from 'fs-extra'\nimport Filter from 'pug-filters'\nimport _Format from 'prettier'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Lex from 'pug-lexer'\nimport Link from 'pug-linker'\nimport Load from 'pug-load'\nimport Match from 'minimatch'\nimport Merge from 'deepmerge'\nimport Parse from 'pug-parser'\nimport Path from 'path'\n\nimport { Package } from './package.js'\nimport BlockNode from './node/block-node.js'\n\nimport { UnrecognizedMessageTransformError } from './error/unrecognized-message-transform-error.js'\n\nconst { DateTime } = DefaultLuxon || ModuleLuxon\nconst { 'ESLint': Lint } = ESLint\nconst { 'format': Format } = _Format\nconst Babel = DefaultBabel || ModuleBabel\nconst FilePath = __filePath\nconst Require = __require\n\nclass Transform {\n  \n  static getAstFromContent(content, option = { 'path': '(unknown)' }) {\n\n    let ast = null\n    let token = null\n    \n    token = Lex(content, { 'filename': option.path })\n    ast = Parse(token, { 'filename': option.path })\n    ast = Load(ast, { 'lex': Lex, 'parse': Parse })\n\n    Filter.handleFilters(ast)\n\n    ast = Link(ast)\n\n    return ast\n\n  }\n\n  static async getSourceFromContent(content, option = { 'path': '(unknown)' }) {\n\n    let ast = this.getAstFromContent(content, option)\n    let blockNode = new BlockNode(ast, option)\n    let blockSource = await blockNode.getSource()\n\n    let source = `  function __getNode(__utility = {}) { \n                      const __node = []\n                      ${blockSource}\n                      return __utility.getNode(__node)\n                    }`\n\n    let local = await this._getLocalFromSource(source)\n\n    return { source, local }\n\n  }\n\n  static async getFunctionSourceFromContent(content, option = { 'path': '(unknown)' }) {\n\n    let { source, local } = await this.getSourceFromContent(content, option)\n\n    local = local\n      .map((local) => `const { ${local} } = __local`)\n      .join('\\n')\n\n    source =  ` function __getNode(__local = {}, __utility = {}) {\n                  ${local}\n                  ${source} \n                  return __getNode(__utility) \n                }`\n\n    return source\n\n  }\n\n  static async getFunctionFromContent(content, option = { 'path': '(unknown)' }) {\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, option)\n    source = await this.formatSource(source)\n\n    let fn = null\n    eval(`fn = ${source}`)\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromContent(content, userOption = {}) {\n\n    let defaultOption = {\n      'path': '(unknown)',\n      'utility': '@virtualpatterns/mablung-pug/utility'\n    }\n\n    let option = Merge(defaultOption, userOption)\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, { 'path': option.path })\n    source = `  // Created by ${Package.name} v${Package.version}\n                // Created at ${DateTime.utc().toFormat('yyyy-LL-dd HH:mm:ss')}\n                // Path = ${option.path === '(unknown)' ? option.path : `'${Path.relative('', option.path)}'`}\n                import { Utility } from '${option.utility}'\n                ${source}\n                export default function(__local = {}, __utility = Utility) { \n                  return __getNode(__local, __utility) \n                }`\n\n    return source\n\n  }\n\n  static async getAstFromPath(path) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let ast = this.getAstFromContent(content, { 'path': path })\n\n    return ast\n\n  }\n\n  static async getSourceFromPath(path) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionSourceFromPath(path) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getFunctionSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionFromPath(path) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let fn = await this.getFunctionFromContent(content, { 'path': path })\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromPath(path, option) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getModuleSourceFromContent(content, { ...option, 'path': path })\n\n    return source\n\n  }\n\n  static async createModuleFromPath(sourcePath, targetPath = FileSystem.statSync(sourcePath).isDirectory() ? sourcePath : `${Path.dirname(sourcePath)}/${Path.basename(sourcePath, Path.extname(sourcePath))}${Path.extname(FilePath)}`, userOption = {}) {\n\n    let defaultOption = {\n      'encoding': 'utf-8',\n      'flag': 'wx'\n    }\n\n    let option = Merge(defaultOption, userOption)\n\n    let sourceInformation = await FileSystem.stat(sourcePath)\n\n    if (sourceInformation.isDirectory()) { \n      return (await this._createModuleFromPath(sourcePath, targetPath, option)).flat()\n    } else {\n      return this._createModuleFromPath(sourcePath, targetPath, option)\n    }\n  \n  }\n\n  static async _createModuleFromPath(sourcePath, targetPath, option) {\n//     console.log(`Transform._createModuleFromPath(\n//   '${Path.relative('', sourcePath)}', \n//   '${Path.relative('', targetPath)}', \n//   option\n// )`)\n\n    let sourceInformation = await FileSystem.stat(sourcePath)\n    // console.log(`sourceInformation.mtimeMs = ${sourceInformation.mtimeMs}`)\n\n    if (sourceInformation.isDirectory()) {\n  \n      let includePattern = [ '*.pug' ]\n      // let excludePattern = [ '*.skip.pug' ]\n\n      let item = await FileSystem.readdir(sourcePath, { 'encoding': 'utf-8', 'withFileTypes': true })\n  \n      let promise = []\n  \n      promise = promise.concat(item\n        .filter((item) => item.isDirectory())\n        .map((folder) => this.createModuleFromPath(`${sourcePath}/${folder.name}`, `${targetPath}/${folder.name}`, option)))\n  \n      promise = promise.concat(item\n        .filter((item) => item.isFile())\n        .filter((file) => includePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n        // .filter((file) => !excludePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n        .map((file) => this.createModuleFromPath(`${sourcePath}/${file.name}`, `${targetPath}/${Path.basename(file.name, Path.extname(file.name))}${Path.extname(FilePath)}`, option)))\n    \n      return Promise.all(promise)\n        \n    } else {\n\n      let isCreated = false\n\n      if (await FileSystem.pathExists(targetPath)) {\n\n        let targetInformation = await FileSystem.stat(targetPath)\n        // console.log(`targetInformation.mtimeMs = ${targetInformation.mtimeMs}`)\n\n        if (sourceInformation.mtimeMs >= targetInformation.mtimeMs) {\n          isCreated = true\n        }\n\n      } else {\n        isCreated = true\n      }\n\n      if (isCreated) {\n\n        let source = null\n        source = await this.getModuleSourceFromPath(sourcePath, option)\n        source = await this.formatSource(source, Path.extname(targetPath).toLowerCase() === '.cjs' ? 'commonjs' : 'esmodule')\n\n        await FileSystem.ensureDir(Path.dirname(targetPath))\n        await FileSystem.writeFile(targetPath, source, { 'encoding': option.encoding, 'flag': option.flag })\n\n      }\n\n      return targetPath\n\n    }\n\n  }\n\n  static async formatSource(sourceIn, environment = Path.extname(FilePath).toLowerCase() === '.cjs' ? 'commonjs' : 'esmodule') {\n\n    let configuration = null\n    configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.babelrc.json')), { 'encoding': 'utf-8' })\n    configuration = configuration.env[environment]\n    \n    let { 'code': sourceOut } = await Babel.transformAsync(sourceIn, configuration)\n\n    sourceOut = Format(sourceOut, {\n      'arrowParens': 'always',\n      'bracketSpacing': true,\n      'parser': 'babel',\n      'quoteProps': 'preserve',\n      'semi': false,\n      'singleQuote': true,\n      'tabWidth': 2,\n      'trailingComma': 'none'\n    })\n\n    return sourceOut\n\n  }\n\n  static async _getLocalFromSource(source) {\n\n    let configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.eslintrc.json')), { 'encoding': 'utf-8' })\n    let lint = new Lint({ 'baseConfig': configuration })\n\n    let result = await lint.lintText(source)\n    let pattern = /^'(.*)' is not defined.$/i\n\n    let local = null\n    local = result[0].messages\n      .filter((message) => message.ruleId === 'no-undef')\n      .map((message) => message.message)\n      .map((message) => {\n\n        let match = null\n\n        if (Is.not.null(match = pattern.exec(message))) {\n          let [ , local ] = match\n          return local\n        } else {\n          throw new UnrecognizedMessageTransformError(message)\n        }\n\n      })\n      .reduce((accumulator, local) => {\n        accumulator[local] = undefined\n        return accumulator\n      }, {})\n\n    local = Object.keys(local)\n\n    return local\n\n  }\n\n}\n\nexport { Transform }"],"file":"transform.js"}