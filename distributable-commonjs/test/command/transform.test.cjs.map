{"version":3,"sources":["../../../source/test/command/transform.test.js"],"names":["FilePath","__filename","Require","require","test","code","Promise","resolve","Transform","once","is","sourcePath","targetPath","Path","dirname","basename","extname","relative","true","FileSystem","pathExists","module","fn","default","node","html","outerHTML","log"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAEA,MAAMA,QAAQ,GAPdC,UAOA;AACA,MAAMC,OAAO,GARbC,OAQA;AAEA,kBAAK,QAAL,EAAe,MAAOC,IAAP,IAAgB;AAE7B,MAAIC,IAAI,GAAG,MAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACxC,QAAIC,oBAAJ,CAAc;AAAE,gBAAU;AAAZ,KAAd,EACGC,IADH,CACQ,MADR,EACgBF,OADhB;AAED,GAHgB,CAAjB;AAKAH,EAAAA,IAAI,CAACM,EAAL,CAAQL,IAAR,EAAc,CAAd;AAED,CATD;AAWA,kBAAK,oBAAL,EAA2B,MAAOD,IAAP,IAAgB;AAEzC,MAAIC,IAAI,GAAG,MAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACxC,QAAIC,oBAAJ,CAAc;AAAE,cAAQ;AAAV,KAAd,EACGC,IADH,CACQ,MADR,EACgBF,OADhB;AAED,GAHgB,CAAjB;AAKAH,EAAAA,IAAI,CAACM,EAAL,CAAQL,IAAR,EAAc,CAAd;AAED,CATD;AAWA,kBAAK,6BAAL,EAAoC,MAAOD,IAAP,IAAgB;AAElD,MAAIO,UAAU,GAAGT,OAAO,CAACK,OAAR,CAAgB,6BAAhB,CAAjB;AACA,MAAIK,UAAU,GAAI,GAAEC,cAAKC,OAAL,CAAaH,UAAb,CAAyB,IAAGE,cAAKE,QAAL,CAAcJ,UAAd,EAA0BE,cAAKG,OAAL,CAAaL,UAAb,CAA1B,CAAoD,GAAEE,cAAKG,OAAL,CAAahB,QAAb,CAAuB,EAA7H;AAEA,MAAIK,IAAI,GAAG,MAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACxC,QAAIC,oBAAJ,CAAc;AACZ,uBAAiB,IADL;AAEZ,OAACG,UAAD,GAAc,IAFF;AAGZ,OAACC,UAAD,GAAc,IAHF;AAIZ,oBAAc,OAJF;AAKZ,gBAAU,IALE;AAMZ,mBAAaC,cAAKI,QAAL,CAAcJ,cAAKC,OAAL,CAAaH,UAAb,CAAd,EAAwCT,OAAO,CAACK,OAAR,CAAgB,2BAAhB,CAAxC;AAND,KAAd,EAQGE,IARH,CAQQ,MARR,EAQgBF,OARhB;AASD,GAVgB,CAAjB;AAYAH,EAAAA,IAAI,CAACM,EAAL,CAAQL,IAAR,EAAc,CAAd;AACAD,EAAAA,IAAI,CAACc,IAAL,CAAU,MAAMC,iBAAWC,UAAX,CAAsBR,UAAtB,CAAhB,EAlBkD,CAoBlD;AACA;AACA;;AACA,MAAIS,MAAM,GAAG,yBAvDflB,OAAO,CAACI,OAuDoB,CAAgBK,UAAhB,CAAb,kDAAb;AACA,MAAIU,EAAE,GAAGD,MAAM,CAACE,OAAP,IAAkBF,MAA3B;AACA,MAAIG,IAAI,GAAGF,EAAE,EAAb;AAEA,MAAIG,IAAI,GAAG,IAAX;AACAA,EAAAA,IAAI,GAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQE,SAAf;AACAD,EAAAA,IAAI,GAAG,qBAAOA,IAAP,CAAP;AAEArB,EAAAA,IAAI,CAACuB,GAAL,CAASF,IAAT;AACArB,EAAAA,IAAI,CAACM,EAAL,CAAQe,IAAR,EAAc,mCAAd;AAED,CAlCD","sourcesContent":["import FileSystem from 'fs-extra'\nimport Path from 'path'\nimport Format from 'pretty'\nimport Test from 'ava'\n\nimport { Transform } from './transform.js'\n\nconst FilePath = __filePath\nconst Require = __require\n\nTest('--help', async (test) => {\n\n  let code = await new Promise((resolve) => {\n    new Transform({ '--help': true })\n      .once('exit', resolve)\n  })\n\n  test.is(code, 0)\n\n})\n\nTest('help create-module', async (test) => {\n\n  let code = await new Promise((resolve) => {\n    new Transform({ 'help': 'create-module' })\n      .once('exit', resolve)\n  })\n\n  test.is(code, 0)\n\n})\n\nTest('create-module <source-path>', async (test) => {\n\n  let sourcePath = Require.resolve('./resource/transform-00.pug')\n  let targetPath = `${Path.dirname(sourcePath)}/${Path.basename(sourcePath, Path.extname(sourcePath))}${Path.extname(FilePath)}`\n    \n  let code = await new Promise((resolve) => {\n    new Transform({\n      'create-module': true,\n      [sourcePath]: true,\n      [targetPath]: true,\n      '--encoding': 'utf-8',\n      '--flag': 'wx',\n      '--utility': Path.relative(Path.dirname(sourcePath), Require.resolve('../../library/utility.js'))\n    })\n      .once('exit', resolve)\n  })\n\n  test.is(code, 0)\n  test.true(await FileSystem.pathExists(targetPath))\n\n  // __transformPath does ...\n  //   URL.pathToFileURL if the environment is ESModule\n  //   require.resolve if the environment is CommonJS\n  let module = await import(__transformPath(targetPath))\n  let fn = module.default || module\n  let node = fn()\n\n  let html = null\n  html = node[0].outerHTML\n  html = Format(html)\n\n  test.log(html)\n  test.is(html, '<a href=\"//google.com\">Google</a>')\n  \n})\n"],"file":"transform.test.cjs"}