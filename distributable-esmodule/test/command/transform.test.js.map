{"version":3,"sources":["../../../source/test/command/transform.test.js"],"names":["FileSystem","Path","Format","Test","Transform","FilePath","_URL","fileURLToPath","import","meta","url","Require","_createRequire","test","code","Promise","resolve","once","is","sourcePath","targetPath","dirname","basename","extname","relative","true","pathExists","module","_URL2","pathToFileURL","fn","default","node","html","outerHTML","log"],"mappings":"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","sourcesContent":["import FileSystem from 'fs-extra'\nimport Path from 'path'\nimport Format from 'pretty'\nimport Test from 'ava'\n\nimport { Transform } from './transform.js'\n\nconst FilePath = __filePath\nconst Require = __require\n\nTest('--help', async (test) => {\n\n  let code = await new Promise((resolve) => {\n    new Transform({ '--help': true })\n      .once('exit', resolve)\n  })\n\n  test.is(code, 0)\n\n})\n\nTest('help create-module', async (test) => {\n\n  let code = await new Promise((resolve) => {\n    new Transform({ 'help': 'create-module' })\n      .once('exit', resolve)\n  })\n\n  test.is(code, 0)\n\n})\n\nTest('create-module <source-path>', async (test) => {\n\n  let sourcePath = Require.resolve('./resource/transform-00.pug')\n  let targetPath = `${Path.dirname(sourcePath)}/${Path.basename(sourcePath, Path.extname(sourcePath))}${Path.extname(FilePath)}`\n    \n  let code = await new Promise((resolve) => {\n    new Transform({\n      'create-module': true,\n      [sourcePath]: true,\n      [targetPath]: true,\n      '--encoding': 'utf-8',\n      '--flag': 'wx',\n      '--utility': Path.relative(Path.dirname(sourcePath), Require.resolve('../../library/utility.js'))\n    })\n      .once('exit', resolve)\n  })\n\n  test.is(code, 0)\n  test.true(await FileSystem.pathExists(targetPath))\n\n  // __transformPath does ...\n  //   URL.pathToFileURL if the environment is ESModule\n  //   require.resolve if the environment is CommonJS\n  let module = await import(__transformPath(targetPath))\n  let fn = module.default || module\n  let node = fn()\n\n  let html = null\n  html = node[0].outerHTML\n  html = Format(html)\n\n  test.log(html)\n  test.is(html, '<a href=\"//google.com\">Google</a>')\n  \n})\n"],"file":"transform.test.js"}