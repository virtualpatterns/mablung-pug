{"version":3,"sources":["../../../source/test/library/scenario.js"],"names":["Browser","DefaultBundle","ModuleBundle","DefaultElement","ModuleElement","FileSystem","Format","Is","JSON5","Match","Path","Pug","Transform","Bundle","document","FilePath","_URL","fileURLToPath","import","meta","url","Require","_createRequire","Scenario","constructor","path","local","modifierPattern","modifier","match","not","null","exec","push","lastIndex","_path","_local","_modifier","getReferenceHtml","html","compileFile","replace","getServerHtml","name","getName","extension","extname","sourcePath","targetPath","dirname","utilityPath","relative","resolve","createModuleFromPath","module","_URL2","pathToFileURL","fn","default","node","map","string","createTextNode","textContent","outerHTML","join","getBrowserHtml","source","JSON","stringify","formatSource","preBundlePath","postBundlePath","ensureDir","writeFile","browser","launch","page","newPage","content","setContent","evaluate","readFile","div","$","innerHTML","close","basename","createScenarioFromFolder","includePattern","excludePattern","item","readdirSync","scenario","concat","filter","isDirectory","folder","isFile","file","reduce","isMatch","pattern","createScenarioFromFile","flat","localPath","pathExistsSync","parse","readFileSync"],"mappings":"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","sourcesContent":["import Browser from 'puppeteer'\nimport DefaultBundle, * as ModuleBundle from 'esbuild'\nimport DefaultElement, * as ModuleElement from 'html-element'\nimport FileSystem from 'fs-extra'\nimport Format from 'pretty'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Match from 'minimatch'\nimport Path from 'path'\nimport Pug from 'pug'\n\nimport { Transform } from '../../index.js'\n\nconst { 'build': Bundle } = DefaultBundle || ModuleBundle\nconst { document } = DefaultElement || ModuleElement\nconst FilePath = __filePath\nconst Require = __require\n\nclass Scenario {\n\n  constructor(path, local = {}) {\n\n    let modifierPattern = /\\.(\\w*?)[./]/gims\n    let modifier = []\n\n    let match = null\n\n    while (Is.not.null(match = modifierPattern.exec(path))) {\n      modifier.push(match[1])\n      modifierPattern.lastIndex --\n    }\n\n    this._path = path\n    this._local = local\n    this._modifier = modifier\n\n  }\n\n  get path() {\n    return this._path\n  }\n\n  get local() {\n    return this._local\n  }\n\n  get modifier() {\n    return this._modifier\n  }\n\n  async getReferenceHtml() {\n\n    let html = null\n    html = Pug.compileFile(this._path)(this._local)\n    html = Format(html)\n\n    html = html.replace(/<(.*?) \\/>/gim, '<$1>')\n\n    return html\n\n  }\n\n  async getServerHtml() {\n\n    let name = Scenario.getName(this._path)\n    let extension = Path.extname(FilePath)\n\n    let sourcePath = this._path\n    let targetPath = `${Path.dirname(sourcePath)}/${name}-server${extension}`\n    let utilityPath = Path.relative(Path.dirname(targetPath), Require.resolve(`../../library/utility${extension}`))\n\n    await Transform.createModuleFromPath(sourcePath, targetPath, { 'utility': utilityPath })\n\n    // __transformPath does ...\n    //   URL.pathToFileURL if the environment is ESModule\n    //   require.resolve if the environment is CommonJS\n    let module = await import(__transformPath(targetPath))\n    let fn = module.default || module\n    let node = fn(this._local)\n\n    let html = null\n    html = node.map((node) => Is.string(node) ? document.createTextNode(node).textContent : node.outerHTML) \n    html = html.join('')\n    html = Format(html)\n\n    return html\n    \n  }\n\n  async getBrowserHtml() {\n\n    let name = Scenario.getName(this._path)\n    let extension = Path.extname(FilePath)\n\n    let sourcePath = this._path\n    let targetPath = `${Path.dirname(sourcePath)}/${name}-browser${extension}`\n    let utilityPath = Path.relative(Path.dirname(targetPath), Require.resolve(`../../library/utility${extension}`))\n\n    await Transform.createModuleFromPath(sourcePath, targetPath, { 'utility': utilityPath })\n\n    let source = null\n    source = `  import ContentFn from './${Path.relative(Path.dirname(sourcePath), targetPath)}'\n                let local = ${JSON.stringify(this._local)}\n                let node = ContentFn(local)\n                let div = document.querySelector('body div')\n                node.forEach((node) => div.appendChild(typeof node === 'string' ? document.createTextNode(node) : node))`\n   \n    source = await Transform.formatSource(source)\n    \n    let preBundlePath = `${Path.dirname(sourcePath)}/${name}-browser-pre${extension}`\n    let postBundlePath = `${Path.dirname(sourcePath)}/${name}-browser-post${extension}`\n\n    await FileSystem.ensureDir(Path.dirname(preBundlePath))\n    await FileSystem.writeFile(preBundlePath, source, { 'encoding': 'utf-8', 'flag': 'wx' })\n\n    await Bundle({\n      'define': {\n        'global': '\\'global\\'',\n        'process.env.NODE_DEBUG': '\\'process.env.NODE_DEBUG\\'',\n        'process': '\\'process\\''\n      },\n      'entryPoints': [ preBundlePath ],\n      'outfile': postBundlePath,\n      'minify': false,\n      'bundle': true\n    })\n\n    // let host = '0.0.0.0'\n    // let port = Path.extname(FilePath) === '.cjs' ? 8080 : 8081\n\n    // Server.start({\n    //   'host': host,\n    //   'port': port,\n    //   'logLevel': 0,\n    //   'mount': [\n    //     [ '/', `${FolderPath}/www` ],\n    //     [ '/favicon.ico', `${FolderPath}/www/resource/application.ico` ]\n    //   ],\n    //   'open': false\n    // })\n\n    // try {\n    \n    let browser = await Browser.launch() // { 'devtools': true, 'headless': false })\n\n    try {\n    \n      let page = await browser.newPage()\n\n      // page.on('console', async (message) => {\n\n      //   switch (message.type().toLowerCase()) {\n      //     case 'log':\n      //       console.log(message.text())\n      //       break\n      //     case 'dir':\n      //       console.dir(await message.args()[0].jsonValue(), { 'depth': null })\n      //       break\n      //   }\n\n      // })\n\n      // await page.goto(`http://${host}:${port}/index.html`)\n      let content = null\n      content = ` <!DOCTYPE html>\n                  <html>\n                    <head>\n                      <meta   charset=\"utf-8\">\n                      <meta   name=\"viewport\"\n                              content=\"width=device-width\">\n                    </head>\n                    <body>\n                      <div></div>\n                    </body>\n                  </html>`\n      \n      content = Format(content)\n      \n      await page.setContent(content, { 'timeout': 0, 'waitUntil': 'domcontentloaded' })\n      await page.evaluate(await FileSystem.readFile(postBundlePath, { 'encoding': 'utf-8' }))\n      \n      let div = await page.$('body div')\n\n      let html = null\n      html = await div.evaluate((node) => node.innerHTML)\n      html = Format(html)\n\n      return html\n      \n    } finally {\n      await browser.close()\n    }\n\n    // } finally {\n    //   Server.shutdown()\n    // }\n\n  } \n  \n  static getName(name) {\n\n    if (Path.extname(name) === '') {\n      return name\n    } else {\n      return this.getName(Path.basename(name, Path.extname(name)))\n    }\n\n  }\n\n  static createScenarioFromFolder(path, includePattern = [ '*.pug' ], excludePattern = [ '*.skip.pug' ]) {\n  \n    let item = FileSystem.readdirSync(path, { 'encoding': 'utf-8', 'withFileTypes': true })\n  \n    let scenario = []\n\n    scenario = scenario.concat(item\n      .filter((item) => item.isDirectory())\n      .map((folder) => this.createScenarioFromFolder(`${path}/${folder.name}`, includePattern, excludePattern)))\n\n    scenario = scenario.concat(item\n      .filter((item) => item.isFile())\n      .filter((file) => includePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n      .filter((file) => !excludePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n      .map((file) => this.createScenarioFromFile(`${path}/${file.name}`)))\n  \n    return scenario.flat()\n  \n  }\n  \n  static createScenarioFromFile(path) {\n\n    let localPath = `${Path.dirname(path)}/${this.getName(path)}-local.json`\n    let local = {}\n  \n    if (FileSystem.pathExistsSync(localPath)) {\n      local = JSON5.parse(FileSystem.readFileSync(localPath, { 'encoding': 'utf-8' }))\n    }\n  \n    return new Scenario(path, local)\n  \n  }\n\n}\n\nexport { Scenario }"],"file":"scenario.js"}