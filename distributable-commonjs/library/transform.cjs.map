{"version":3,"sources":["../../source/library/transform.js"],"names":["DateTime","DefaultLuxon","ModuleLuxon","Lint","ESLint","Format","_Format","Babel","DefaultBabel","ModuleBabel","FilePath","__filename","Require","require","Transform","getAstFromContent","content","option","ast","token","path","Lex","Parse","Filter","handleFilters","getSourceFromContent","blockNode","BlockNode","blockSource","getSource","source","local","_getLocalFromSource","getFunctionSourceFromContent","map","join","getFunctionFromContent","formatSource","fn","eval","getModuleSourceFromContent","userOption","defaultOption","Package","name","version","utc","toFormat","Path","relative","utility","getAstFromPath","FileSystem","readFile","getSourceFromPath","getFunctionSourceFromPath","getFunctionFromPath","getModuleSourceFromPath","createModuleFromPath","sourcePath","targetPath","statSync","isDirectory","dirname","basename","extname","sourceInformation","stat","includePattern","excludePattern","item","readdir","createModule","concat","filter","folder","isFile","file","reduce","isMatch","pattern","Promise","all","isCreated","pathExists","targetInformation","mtime","toLowerCase","ensureDir","writeFile","encoding","flag","resolve","sourceIn","environment","configuration","JSON5","parse","env","sourceOut","transformAsync","lint","result","lintText","messages","message","ruleId","match","Is","not","null","exec","UnrecognizedMessageTransformError","accumulator","undefined","Object","keys"],"mappings":"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","sourcesContent":["import DefaultBabel, * as ModuleBabel from '@babel/core'\nimport DefaultLuxon, * as ModuleLuxon from 'luxon'\nimport ESLint from 'eslint'\nimport FileSystem from 'fs-extra'\nimport Filter from 'pug-filters'\nimport _Format from 'prettier'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Lex from 'pug-lexer'\nimport Link from 'pug-linker'\nimport Load from 'pug-load'\nimport Match from 'minimatch'\nimport Merge from 'deepmerge'\nimport Parse from 'pug-parser'\nimport Path from 'path'\n\nimport { Package } from './package.js'\nimport BlockNode from './node/block-node.js'\n\nimport { UnrecognizedMessageTransformError } from './error/unrecognized-message-transform-error.js'\n\nconst { DateTime } = DefaultLuxon || ModuleLuxon\nconst { 'ESLint': Lint } = ESLint\nconst { 'format': Format } = _Format\nconst Babel = DefaultBabel || ModuleBabel\nconst FilePath = __filePath\nconst Require = __require\n\nclass Transform {\n  \n  static getAstFromContent(content, option = { 'path': '(unknown)' }) {\n\n    let ast = null\n    let token = null\n    \n    token = Lex(content, { 'filename': option.path })\n    ast = Parse(token, { 'filename': option.path })\n    ast = Load(ast, { 'lex': Lex, 'parse': Parse })\n\n    Filter.handleFilters(ast)\n\n    ast = Link(ast)\n\n    return ast\n\n  }\n\n  static async getSourceFromContent(content, option = { 'path': '(unknown)' }) {\n\n    let ast = this.getAstFromContent(content, option)\n    let blockNode = new BlockNode(ast, option)\n    let blockSource = await blockNode.getSource()\n\n    let source = `  function __getNode(__utility = {}) { \n                      const __node = []\n                      ${blockSource}\n                      return __utility.getNode(__node)\n                    }`\n\n    let local = await this._getLocalFromSource(source)\n\n    return { source, local }\n\n  }\n\n  static async getFunctionSourceFromContent(content, option = { 'path': '(unknown)' }) {\n\n    let { source, local } = await this.getSourceFromContent(content, option)\n\n    local = local\n      .map((local) => `const { ${local} } = __local`)\n      .join('\\n')\n\n    source =  ` function __getNode(__local = {}, __utility = {}) {\n                  ${local}\n                  ${source} \n                  return __getNode(__utility) \n                }`\n\n    return source\n\n  }\n\n  static async getFunctionFromContent(content, option = { 'path': '(unknown)' }) {\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, option)\n    source = await this.formatSource(source)\n\n    let fn = null\n    eval(`fn = ${source}`)\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromContent(content, userOption = {}) {\n\n    let defaultOption = {\n      'path': '(unknown)',\n      'utility': '@virtualpatterns/mablung-pug/utility'\n    }\n\n    let option = Merge(defaultOption, userOption)\n\n    let source = null\n    source = await this.getFunctionSourceFromContent(content, { 'path': option.path })\n    source = `  // Created by ${Package.name} v${Package.version}\n                // Created at ${DateTime.utc().toFormat('yyyy-LL-dd HH:mm:ss')}\n                // Path = ${option.path === '(unknown)' ? option.path : `'${Path.relative('', option.path)}'`}\n                import { Utility } from '${option.utility}'\n                ${source}\n                export default function(__local = {}, __utility = Utility) { \n                  return __getNode(__local, __utility) \n                }`\n\n    return source\n\n  }\n\n  static async getAstFromPath(path) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let ast = this.getAstFromContent(content, { 'path': path })\n\n    return ast\n\n  }\n\n  static async getSourceFromPath(path) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionSourceFromPath(path) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getFunctionSourceFromContent(content, { 'path': path })\n\n    return source\n\n  }\n\n  static async getFunctionFromPath(path) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let fn = await this.getFunctionFromContent(content, { 'path': path })\n\n    return fn\n\n  }\n\n  static async getModuleSourceFromPath(path, option) {\n\n    let content = await FileSystem.readFile(path, { 'encoding': 'utf-8' })\n    let source = await this.getModuleSourceFromContent(content, { ...option, 'path': path })\n\n    return source\n\n  }\n\n  static async createModuleFromPath(sourcePath, targetPath = FileSystem.statSync(sourcePath).isDirectory() ? sourcePath : `${Path.dirname(sourcePath)}/${Path.basename(sourcePath, Path.extname(sourcePath))}${Path.extname(FilePath)}`, userOption = {}) {\n\n    let defaultOption = {\n      'encoding': 'utf-8',\n      'flag': 'wx'\n    }\n\n    let option = Merge(defaultOption, userOption)\n\n    let sourceInformation = await FileSystem.stat(sourcePath)\n\n    if (sourceInformation.isDirectory()) {\n  \n      let includePattern = [ '*.pug' ]\n      let excludePattern = [ '*.skip.pug' ]\n\n      let item = await FileSystem.readdir(sourcePath, { 'encoding': 'utf-8', 'withFileTypes': true })\n  \n      let createModule = []\n  \n      createModule = createModule.concat(item\n        .filter((item) => item.isDirectory())\n        .map((folder) => this.createModuleFromPath(`${sourcePath}/${folder.name}`, `${targetPath}/${folder.name}`, option)))\n  \n      createModule = createModule.concat(item\n        .filter((item) => item.isFile())\n        .filter((file) => includePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n        .filter((file) => !excludePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n        .map((file) => this.createModuleFromPath(`${sourcePath}/${file.name}`, `${targetPath}/${Path.basename(file.name, Path.extname(file.name))}${Path.extname(FilePath)}`, option)))\n    \n      return Promise.all(createModule)\n        \n    } else {\n\n      let isCreated = false\n\n      if (await FileSystem.pathExists(targetPath)) {\n\n        let targetInformation = await FileSystem.stat(targetPath)\n\n        // console.log(`Existing '${Path.relative('', targetPath)}' ...`)\n        // console.log(`Source ${sourceInformation.mtime}`)\n        // console.log(`Target ${targetInformation.mtime}`)\n\n        if (sourceInformation.mtime >= targetInformation.mtime) {\n          isCreated = true\n        }\n\n      } else {\n        isCreated = true\n      }\n\n      if (isCreated) {\n\n        let source = null\n        source = await this.getModuleSourceFromPath(sourcePath, option)\n        source = await this.formatSource(source, Path.extname(targetPath).toLowerCase() === '.cjs' ? 'commonjs' : 'esmodule')\n\n        // console.log(`Creating '${Path.relative('', targetPath)}' ...`)\n\n        await FileSystem.ensureDir(Path.dirname(targetPath))\n        return FileSystem.writeFile(targetPath, source, { 'encoding': option.encoding, 'flag': option.flag })\n    \n      } else {\n        return Promise.resolve()\n      }\n\n    }\n\n  }\n\n  static async formatSource(sourceIn, environment = Path.extname(FilePath).toLowerCase() === '.cjs' ? 'commonjs' : 'esmodule') {\n\n    let configuration = null\n    configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.babelrc.json')), { 'encoding': 'utf-8' })\n    configuration = configuration.env[environment]\n    \n    let { 'code': sourceOut } = await Babel.transformAsync(sourceIn, configuration)\n\n    sourceOut = Format(sourceOut, {\n      'arrowParens': 'always',\n      'bracketSpacing': true,\n      'parser': 'babel',\n      'quoteProps': 'preserve',\n      'semi': false,\n      'singleQuote': true,\n      'tabWidth': 2,\n      'trailingComma': 'none'\n    })\n\n    return sourceOut\n\n  }\n\n  static async _getLocalFromSource(source) {\n\n    let configuration = JSON5.parse(await FileSystem.readFile(Require.resolve('./transform.eslintrc.json')), { 'encoding': 'utf-8' })\n    let lint = new Lint({ 'baseConfig': configuration })\n\n    let result = await lint.lintText(source)\n    let pattern = /^'(.*)' is not defined.$/i\n\n    let local = null\n    local = result[0].messages\n      .filter((message) => message.ruleId === 'no-undef')\n      .map((message) => message.message)\n      .map((message) => {\n\n        let match = null\n\n        if (Is.not.null(match = pattern.exec(message))) {\n          let [ , local ] = match\n          return local\n        } else {\n          throw new UnrecognizedMessageTransformError(message)\n        }\n\n      })\n      .reduce((accumulator, local) => {\n        accumulator[local] = undefined\n        return accumulator\n      }, {})\n\n    local = Object.keys(local)\n\n    return local\n\n  }\n\n}\n\nexport { Transform }"],"file":"transform.cjs"}