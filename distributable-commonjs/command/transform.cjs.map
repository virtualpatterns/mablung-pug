{"version":3,"sources":["../../source/command/transform.js"],"names":["Process","process","main","Command","version","Package","command","description","option","action","sourcePath","targetPath","Transform","createModuleFromPath","Path","resolve","undefined","encoding","flag","utility","error","console","exit","parseAsync","argv"],"mappings":"AAAA;;;AAEA;;AACA;;AACA;;AAEA;;AACA;;;;AAEA,MAAMA,OAAO,GAAGC,OAAhB;;AAEA,eAAeC,IAAf,GAAsB;AAEpB,MAAI;AAEFC,uBACGC,OADH,CACWC,iBAAQD,OADnB;;AAGAD,uBACGG,OADH,CACW,2CADX,EAEGC,WAFH,CAEe,oCAFf,EAGGC,MAHH,CAGU,uBAHV,EAGmC,sBAHnC,EAG2D,OAH3D,EAIGA,MAJH,CAIU,eAJV,EAI2B,qDAJ3B,EAIkF,IAJlF,EAKGA,MALH,CAKU,oBALV,EAKgC,kCALhC,EAKoE,sCALpE,EAMGC,MANH,CAMU,OAAOC,UAAP,EAAmBC,UAAnB,EAA+BH,MAA/B,KAA0C;AAEhD,UAAI;AAEF;AACA;AACA;AAEA,cAAMI,qBAAUC,oBAAV,CAA+BC,cAAKC,OAAL,CAAaL,UAAb,CAA/B,EAAyDC,UAAU,GAAGG,cAAKC,OAAL,CAAaJ,UAAb,CAAH,GAA8BK,SAAjG,EAA4G;AAChH,sBAAYR,MAAM,CAACS,QAD6F;AAEhH,kBAAQT,MAAM,CAACU,IAFiG;AAGhH,qBAAWV,MAAM,CAACW;AAH8F,SAA5G,CAAN;AAMD,OAZD,CAYE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACApB,QAAAA,OAAO,CAACsB,IAAR,CAAa,CAAb;AACD;AAEF,KAzBH;;AA2BA,UAAMnB,mBAAQoB,UAAR,CAAmBvB,OAAO,CAACwB,IAA3B,CAAN;AAED,GAlCD,CAkCE,OAAOJ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AAEF;;AAEDlB,IAAI","sourcesContent":["#!/usr/bin/env node\n\nimport '@virtualpatterns/mablung-source-map-support/install'\nimport Command from 'commander'\nimport Path from 'path'\n\nimport { Package } from '../library/package.js'\nimport { Transform } from '../library/transform.js'\n\nconst Process = process\n\nasync function main() {\n\n  try {\n        \n    Command\n      .version(Package.version)\n\n    Command\n      .command('create-module <source-path> [target-path]')\n      .description('Create a module that returns nodes')\n      .option('--encoding <encoding>', 'Encoding of the file', 'utf-8')\n      .option('--flag <flag>', 'Flag used for to write the file, one of \"w\" or \"wx\"', 'wx')\n      .option('--utility <module>', 'Module path of the utility class', '@virtualpatterns/mablung-pug/utility')\n      .action(async (sourcePath, targetPath, option) => {\n\n        try {\n\n          // console.log(`sourcePath = '${Path.resolve(sourcePath)}'`)\n          // console.log(`targetPath = ${targetPath ? `'${Path.resolve(sourcePath)}'` : '(undefined)'}`)\n          // console.log(`--encoding = '${option.encoding}'`)\n\n          await Transform.createModuleFromPath(Path.resolve(sourcePath), targetPath ? Path.resolve(targetPath) : undefined, {\n            'encoding': option.encoding,\n            'flag': option.flag,\n            'utility': option.utility\n          })\n\n        } catch (error) {\n          console.error(error)\n          Process.exit(1)\n        }\n\n      })\n\n    await Command.parseAsync(Process.argv)\n        \n  } catch (error) {\n    console.error(error)\n  }\n\n}\n\nmain()\n"],"file":"transform.cjs"}