{"version":3,"sources":["../../../source/test/library/scenario.js"],"names":["Bundle","DefaultBundle","ModuleBundle","document","DefaultElement","ModuleElement","Mutex","DefaultSemaphore","ModuleSemaphore","FilePath","__filename","Require","require","Scenario","constructor","path","modifierPattern","modifier","match","Is","not","null","exec","push","lastIndex","name","getName","localPath","Path","dirname","local","FileSystem","pathExistsSync","JSON5","parse","readFileSync","_path","_modifier","_name","_local","_lock","getReferenceHtml","html","Pug","compileFile","replace","createModule","Transform","createModuleFromPath","extname","relative","resolve","getNodeHtml","node","map","string","createTextNode","textContent","outerHTML","join","getServerHtml","modulePath","use","module","fn","default","getSource","source","JSON","stringify","formatSource","getBrowserHtml","preBundlePath","basename","postBundlePath","ensureDir","writeFile","browser","Browser","launch","page","newPage","content","setContent","evaluate","readFile","div","$","innerHTML","close","createScenarioFromFolder","includePattern","item","readdirSync","scenario","concat","filter","isDirectory","folder","isFile","file","reduce","isMatch","pattern","createScenarioFromFile","flat"],"mappings":"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","sourcesContent":["import DefaultSemaphore, * as ModuleSemaphore from 'await-semaphore'\nimport Browser from 'puppeteer'\nimport DefaultBundle, * as ModuleBundle from 'esbuild'\nimport DefaultElement, * as ModuleElement from 'html-element'\nimport FileSystem from 'fs-extra'\nimport Format from 'pretty'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Match from 'minimatch'\nimport Path from 'path'\nimport Pug from 'pug'\n\nimport { Transform } from '../../index.js'\n\nconst { 'build': Bundle } = DefaultBundle || ModuleBundle\nconst { document } = DefaultElement || ModuleElement\nconst { Mutex } = DefaultSemaphore || ModuleSemaphore\nconst FilePath = __filePath\nconst Require = __require\n\nclass Scenario {\n\n  constructor(path) {\n\n    let modifierPattern = /\\.(\\w*?)[./]/gims\n    let modifier = []\n\n    let match = null\n\n    while (Is.not.null(match = modifierPattern.exec(path))) {\n      modifier.push(match[1])\n      modifierPattern.lastIndex --\n    }\n\n    let name = Scenario.getName(path)\n\n    let localPath = `${Path.dirname(path)}/${name}.json`\n    let local = {}\n  \n    if (FileSystem.pathExistsSync(localPath)) {\n      local = JSON5.parse(FileSystem.readFileSync(localPath, { 'encoding': 'utf-8' }))\n    }\n  \n    this._path = path\n    this._modifier = modifier\n\n    this._name = name\n    this._local = local\n\n    this._lock = new Mutex()\n\n  }\n\n  get path() {\n    return this._path\n  }\n\n  get modifier() {\n    return this._modifier\n  }\n\n  get name() {\n    return this._name\n  }\n\n  get local() {\n    return this._local\n  }\n\n  async getReferenceHtml() {\n\n    let html = null\n    html = Pug.compileFile(this._path)(this._local)\n    html = Format(html)\n\n    html = html.replace(/<(.*?) \\/>/gms, '<$1>')\n\n    return html\n\n  }\n\n  async createModule() {\n    return Transform.createModuleFromPath(this._path, `${Path.dirname(this._path)}/${this._name}${Path.extname(FilePath)}`, { 'utility': Path.relative(Path.dirname(this._path), Require.resolve(`../../library/utility${Path.extname(FilePath)}`)) })\n  }\n\n  getNodeHtml(node) {\n    return node\n      .map((node) => Is.string(node) ? document.createTextNode(node).textContent : node.outerHTML) \n      .join('')\n  }\n\n  async getServerHtml() {\n\n    let modulePath = await this._lock.use(() => this.createModule())\n    let module = await import(modulePath)\n\n    let fn = module.default\n    let node = fn(this._local)\n\n    let html = null\n    html = this.getNodeHtml(node)\n    html = Format(html)\n\n    return html\n    \n  }\n\n  async getSource(modulePath) {\n\n    let source = null\n    source =  ` import ContentFn from './${Path.relative(Path.dirname(modulePath), modulePath)}'\n                let div = document.querySelector('body div')\n                let node = ContentFn(${JSON.stringify(this._local)})\n                node.forEach((node) => div.appendChild(typeof node === 'string' ? document.createTextNode(node) : node))`\n    \n    source = await Transform.formatSource(source)\n\n    return source\n\n  }\n\n  async getBrowserHtml() {\n\n    let modulePath = await this._lock.use(() => this.createModule())\n    let source = await this.getSource(modulePath)\n   \n    let preBundlePath = `${Path.dirname(modulePath)}/${Path.basename(modulePath, Path.extname(modulePath))}-pre-bundle${Path.extname(modulePath)}`\n    let postBundlePath = `${Path.dirname(modulePath)}/${Path.basename(modulePath, Path.extname(modulePath))}-post-bundle${Path.extname(modulePath)}`\n\n    await FileSystem.ensureDir(Path.dirname(preBundlePath))\n    await FileSystem.writeFile(preBundlePath, source, { 'encoding': 'utf-8', 'flag': 'wx' })\n\n    await Bundle({\n      'define': {\n        'global': '\\'global\\'',\n        'process.env.NODE_DEBUG': '\\'process.env.NODE_DEBUG\\'',\n        'process': '\\'process\\''\n      },\n      'entryPoints': [ preBundlePath ],\n      'outfile': postBundlePath,\n      'minify': false,\n      'bundle': true\n    })\n    \n    let browser = await Browser.launch() // { 'devtools': true, 'headless': false })\n\n    try {\n    \n      let page = await browser.newPage()\n\n      let content = null\n      content = ` <!DOCTYPE html>\n                  <html>\n                    <head>\n                      <meta   charset=\"utf-8\">\n                      <meta   name=\"viewport\"\n                              content=\"width=device-width\">\n                    </head>\n                    <body>\n                      <div></div>\n                    </body>\n                  </html>`\n      \n      content = Format(content)\n      \n      await page.setContent(content, { 'timeout': 0, 'waitUntil': 'domcontentloaded' })\n      await page.evaluate(await FileSystem.readFile(postBundlePath, { 'encoding': 'utf-8' }))\n      \n      let div = await page.$('body div')\n\n      let html = null\n      html = await div.evaluate((node) => node.innerHTML)\n      html = Format(html)\n\n      return html\n      \n    } finally {\n      await browser.close()\n    }\n\n  } \n  \n  static getName(name) {\n\n    if (Path.extname(name) === '') {\n      return name\n    } else {\n      return this.getName(Path.basename(name, Path.extname(name)))\n    }\n\n  }\n\n  static createScenarioFromFolder(path) {\n\n    let includePattern = ['*.pug']\n    // let excludePattern = ['*.skip.pug']\n  \n    let item = FileSystem.readdirSync(path, { 'encoding': 'utf-8', 'withFileTypes': true })\n  \n    let scenario = []\n\n    scenario = scenario.concat(item\n      .filter((item) => item.isDirectory())\n      .map((folder) => this.createScenarioFromFolder(`${path}/${folder.name}`)))\n    \n    scenario = scenario.concat(item\n      .filter((item) => item.isFile())\n      .filter((file) => includePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n      // .filter((file) => !excludePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(file.name, pattern), false))\n      .map((file) => this.createScenarioFromFile(`${path}/${file.name}`)))\n  \n    return scenario.flat()\n  \n  }\n  \n  static createScenarioFromFile(path) {\n    return new Scenario(path)\n  }\n\n}\n\nexport { Scenario }"],"file":"scenario.cjs"}