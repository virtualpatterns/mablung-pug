{"version":3,"sources":["../../source/library/utility.js"],"names":["Create","Clone","DefaultConvert","ModuleConvert","IsNode","Convert","Utility","create","parameter","createNode","name","_name","_property","_childNode","length","Array","isArray","getNodeName","getNodeProperty","getNode","property","_attribute","attributes","map","Object","entries","filter","toLowerCase","forEach","value","test","sort","leftName","rightName","localeCompare","node","previousIndex","previousNode","undefined","reduce","accumulator","currentNode","push","addNode","addAttribute","attribute","getAttributeName","getAttributeValue","currentValue","join","keys","key","addAndAttribute","object","fn","entry","convertToNode","pattern","source","tag","replace","eval"],"mappings":"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","sourcesContent":["import Create from 'hyperscript'\nimport Clone from 'clone'\nimport DefaultConvert, * as ModuleConvert from 'html-to-hyperscript'\nimport IsNode from 'is-node'\n\nconst { 'htmlToHs2': Convert } = DefaultConvert || ModuleConvert\n\nclass Utility {\n\n  static create(...parameter) {\n    // console.log(`Utility.create(...parameter)`)\n    // console.dir({ 'parameter': parameter }, { 'depth': null })\n    return Create(...parameter)\n  }\n\n  static createNode(name, ...parameter) {\n\n    let _name = name\n    let _property = {}\n    let _childNode = []\n\n    switch (parameter.length) {\n      case 0:\n        // _property = default\n        // _childNode = default\n        break\n      case 1:\n\n        switch (true) {\n          case typeof parameter[0] === 'string':\n            // _property = default\n            _childNode = [parameter[0]]\n            break\n          case Array.isArray(parameter[0]):\n            // _property = default\n            _childNode = parameter[0]\n            break\n          default:\n            _property = parameter[0]\n            // _childNode = default\n        }\n\n        break\n      default:\n\n        switch (true) {\n          case typeof parameter[1] === 'string':\n            _property = parameter[0]\n            _childNode = [parameter[1]]\n            break\n          default:\n            _property = parameter[0]\n            _childNode = parameter[1]\n        }\n\n    }\n\n    _name = this.getNodeName(_name)\n    _property = this.getNodeProperty(_property)\n    _childNode = this.getNode(_childNode)\n\n    return this.create(_name, _property, _childNode)\n\n  }\n\n  static getNodeName(name) {\n    return name\n  }\n\n  static getNodeProperty(property) {\n\n    let _property = Clone(property)\n    let _attribute = property.attributes ? Clone(property.attributes) : {}\n\n    // re-name selected property\n    let map = {\n      'class': 'className',\n      'colspan': 'colSpan',\n      'for': 'htmlFor',\n      'http-equiv': 'httpEquiv'\n    }\n\n    Object.entries(_property)\n      .filter(([name]) => name.toLowerCase() in map)\n      .forEach(([name, value]) => {\n        _property[map[name.toLowerCase()]] = value\n        delete _property[name]\n      })\n\n    // add selected property to _attribute and remove\n    Object.entries(_property)\n      .filter(([name]) => /^\\((.*?)\\)$/.test(name) ||\n                          (IsNode && /^data-(.*?)$/.test(name)) ||\n                          name === 'checked')\n      .forEach(([name, value]) => {\n        _attribute[name] = value\n        delete _property[name]\n      })\n\n    // convert _attribute to an array\n    // of objects if it isn't already\n    // and this is a NodeJS process\n    if (IsNode &&\n        !Array.isArray(_attribute)) {\n\n      _attribute = Object.entries(_attribute)\n        .sort(([leftName], [rightName]) => leftName.localeCompare(rightName))\n        .map(([name, value]) => ({ 'name': name, 'value': value }))\n\n    }\n\n    // assign _attribute to ...\n    //   .attributes if this is a NodeJS process\n    //   .attrs otherwise\n    _property[IsNode ? 'attributes' : 'attrs'] = _attribute\n\n    return _property\n\n  }\n\n  static getNode(node) {\n\n    let previousIndex = -1\n    let previousNode = undefined\n\n    node = node.reduce((accumulator, currentNode) => {\n\n      if (typeof currentNode === 'string' &&\n          typeof previousNode === 'string') {\n        accumulator[previousIndex] += currentNode\n      } else {\n        accumulator.push(currentNode)\n        previousIndex++\n      }\n\n      previousNode = currentNode\n      return accumulator\n        \n    }, [])\n\n    return node\n\n  }\n\n  static addNode(value, node) {\n    node.push(...(Array.isArray(value) ? value : [value]))\n  }\n\n  static addAttribute(name, value, attribute) {\n\n    if (typeof value === 'boolean' &&\n        value === false) {\n      // do nothing\n    } else {\n\n      name = this.getAttributeName(name)\n      value = this.getAttributeValue(name, value, attribute[name])\n\n      if (value !== undefined) {\n        attribute[name] = value\n      }\n\n    }\n\n  }\n\n  static getAttributeName(name) {\n    return name\n  }\n\n  static getAttributeValue(name, value, currentValue) {\n\n    if (typeof value === 'boolean') {\n      value = value ? name : false\n    } else if (typeof value === 'string') {\n      value = currentValue ? `${currentValue} ${value}` : value\n    } else if (Array.isArray(value)) {\n      value = currentValue ? `${currentValue} ${value.join(' ')}` : value.join(' ')\n    } else {\n\n      switch (name.toLowerCase()) {\n        case 'class':\n          value = Object.keys(value)\n            .filter((key) => value[key])\n            .join(' ')\n          break\n        // case 'style':\n        //   value = Object.keys(value)\n        //     .map((key) => `${key}:${value[key]};`)\n        //     .join('')\n        //   break\n      }\n\n    }\n\n    return value === '' ? undefined : value\n\n  }\n\n  static addAndAttribute(object, attribute) {\n    Object.entries(object).forEach(([ name, value ]) => this.addAttribute(name, value, attribute))\n  }\n\n  static forEach(value, fn) {\n                \n    if (Array.isArray(value)) {\n\n      value.forEach(fn)\n      return value.length\n\n    } else {\n\n      let entry = Object.entries(value)\n\n      entry.forEach(([ name, value ]) => fn(value, name))\n      return entry.length\n\n    }\n\n  }\n\n  static convertToNode(value) {\n    // console.log('Utility.convertToNode(value)')\n    // console.dir({ 'value': value }, { 'depth': null })\n\n    let pattern = /^\\/\\/<!\\[CDATA\\[(.*?)\\/\\/\\]\\]>$/ims\n\n    if (pattern.test(value)) {\n      return value\n    } else {\n\n      let [source, tag] = Convert({ 'syntax': 'h', 'tabSize': 2 }, value)\n      // console.log(source)\n\n      if (tag.length > 0) {\n\n        let pattern = /h\\((.*?)\\)/gims\n\n        while (pattern.test(source)) {\n          source = source.replace(pattern, 'this.createNode($1)')\n        }\n\n        // console.log(source)\n        return eval(source)\n\n      } else {\n        return value\n      }\n\n    }\n\n  }\n\n}\n\nexport { Utility }"],"file":"utility.js"}