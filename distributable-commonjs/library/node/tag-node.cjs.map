{"version":3,"sources":["../../../source/library/node/tag-node.js"],"names":["TagNode","Node","constructor","node","option","getSource","_node","selfClosing","UnsupportedTagTransformError","blockAttributeNode","BlockAttributeNode","_option","blockAttributeSource","isEmpty","blockNode","BlockNode","block","blockSource","name"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAEA;;;;AAEA,MAAMA,OAAN,SAAsBC,aAAtB,CAA2B;AAEzBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,UAAMD,IAAN,EAAYC,MAAZ;AACD;;AAED,QAAMC,SAAN,GAAkB;AAEhB,QAAI,KAAKC,KAAL,CAAWC,WAAf,EAA4B;AAC1B,YAAM,IAAIC,0DAAJ,CAAiC,KAAKF,KAAtC,CAAN;AACD,KAFD,MAEO;AAEL,UAAIG,kBAAkB,GAAG,IAAIC,2BAAJ,CAAuB,KAAKJ,KAA5B,EAAmC,KAAKK,OAAxC,CAAzB;AAEA,UAAIC,oBAAoB,GAAG,IAA3B;AACAA,MAAAA,oBAAoB,GAAG,MAAMH,kBAAkB,CAACJ,SAAnB,EAA7B;AACAO,MAAAA,oBAAoB,GAAGH,kBAAkB,CAACI,OAAnB,GACrB,KADqB,GAEpB;AACT;AACA,cAAcD,oBAAqB;AACnC;AACA,eANM;AAQA,UAAIE,SAAS,GAAG,IAAIC,kBAAJ,CAAc,KAAKT,KAAL,CAAWU,KAAzB,EAAgC,KAAKL,OAArC,CAAhB;AAEA,UAAIM,WAAW,GAAG,IAAlB;AACAA,MAAAA,WAAW,GAAG,MAAMH,SAAS,CAACT,SAAV,EAApB;AACAY,MAAAA,WAAW,GAAGH,SAAS,CAACD,OAAV,GACZ,KADY,GAEX;AACT;AACA,cAAcI,WAAY;AAC1B;AACA,eANM;AAQA,aAAQ,2CAA0C,KAAKX,KAAL,CAAWY,IAAK,MAAKN,oBAAqB,KAAIK,WAAY,YAA5G;AAED;AAEF;;AAxCwB;;eA4CZjB,O","sourcesContent":["\nimport BlockAttributeNode from './block-attribute-node.js'\nimport BlockNode from './block-node.js'\nimport Node from '../node.js'\n\nimport { UnsupportedTagTransformError } from '../error/unsupported-tag-transform-error.js'\n\nclass TagNode extends Node {\n\n  constructor(node, option) {\n    super(node, option)\n  }\n\n  async getSource() {\n\n    if (this._node.selfClosing) {\n      throw new UnsupportedTagTransformError(this._node)\n    } else {\n\n      let blockAttributeNode = new BlockAttributeNode(this._node, this._option)\n\n      let blockAttributeSource = null\n      blockAttributeSource = await blockAttributeNode.getSource()\n      blockAttributeSource = blockAttributeNode.isEmpty ? \n        ' {}' : \n        ` (() => { \n            const __attribute = {}\n            ${blockAttributeSource}\n            return __attribute\n          })()`\n\n      let blockNode = new BlockNode(this._node.block, this._option)\n\n      let blockSource = null\n      blockSource = await blockNode.getSource()\n      blockSource = blockNode.isEmpty ? \n        ' []' : \n        ` (() => { \n            const __node = []\n            ${blockSource}\n            return __node\n          })()`\n\n      return `__utility.addNode(__utility.createNode('${this._node.name}', ${blockAttributeSource}, ${blockSource}), __node)`\n\n    }\n\n  }\n\n}\n\nexport default TagNode"],"file":"tag-node.cjs"}