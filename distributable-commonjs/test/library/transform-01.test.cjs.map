{"version":3,"sources":["../../../source/test/library/transform-01.test.js"],"names":["Parse","DefaultParser","ModuleParser","Traverse","DefaultTraverse","default","ModuleTraverse","FilePath","__filename","FolderPath","Path","dirname","Require","require","test","sourcePath","targetPath","extname","notThrowsAsync","Transform","createModuleFromPath","true","FileSystem","pathExists","throwsAsync","option","utility","relative","resolve","content","readFile","ast","existsUtility","CallExpression","path","node","callee","name","arguments","length","type","is","value","ImportDeclaration","source","forEach","pathExistsSync"],"mappings":"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","sourcesContent":["import DefaultParser, * as ModuleParser from '@babel/parser'\nimport FileSystem from 'fs-extra'\nimport Path from 'path'\nimport Test from 'ava'\nimport Touch from 'touch'\nimport DefaultTraverse, * as ModuleTraverse from '@babel/traverse'\n\nimport { Transform } from '../../index.js'\n\nconst { 'parse': Parse } = DefaultParser || ModuleParser\nconst Traverse = DefaultTraverse.default || ModuleTraverse.default\nconst FilePath = __filePath\nconst FolderPath = Path.dirname(FilePath)\nconst Require = __require\n\nTest('createModuleFromPath(sourcePath, targetPath, option) using file', async (test) => {\n\n  let sourcePath = `${FolderPath}/resource/transform-01/file/00-content.pug`\n  let targetPath = `${FolderPath}/resource/transform-01/file/00-content${Path.extname(FilePath)}`\n\n  // succeeds writing target\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath))\n  test.true(await FileSystem.pathExists(targetPath))\n\n  // succeeds (but writes nothing) with no change to source\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath))\n\n  // fails to overwrite as 'flag' defaults to 'wx' with changed source \n  await Touch(sourcePath)\n  await test.throwsAsync(Transform.createModuleFromPath(sourcePath), { 'code': 'EEXIST'})\n\n  // succeeds to overwrite as 'flag' is 'w' with changed source \n  let option = { 'flag': 'w' }\n\n  await Touch(sourcePath)\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath, targetPath, option))\n\n  // succeeds to overwrite as 'flag' is 'w' with changed source, utility import is defined\n  let utility = Path.relative(Path.dirname(sourcePath), Require.resolve('../../library/utility.js'))\n  \n  option = { 'flag': 'w', 'utility': utility }\n\n  await Touch(sourcePath)\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath, targetPath, option))\n\n  let content = await FileSystem.readFile(targetPath, { 'encoding': 'utf-8' })\n  let ast = Parse(content, { 'sourceType': 'module' })\n\n  let existsUtility = false \n\n  Traverse(ast, {\n    CallExpression(path) {\n\n      if (path.node.callee.name === 'require' &&\n          path.node.arguments.length === 1 &&\n          path.node.arguments[0].type === 'StringLiteral') {\n\n        // test.log(`const Utility = require('${path.node.arguments[0].value}')`)\n        test.is(path.node.arguments[0].value, utility)\n\n        existsUtility = true\n\n      }\n\n    },\n    ImportDeclaration(path) {\n\n      // test.log(`import Utility from '${path.node.source.value}'`)\n      test.is(path.node.source.value, utility)\n\n      existsUtility = true\n\n    }\n  })\n\n  test.true(existsUtility)\n\n})\n\nTest('createModuleFromPath(sourcePath, targetPath, option) using folder', async (test) => {\n\n  let sourcePath = `${FolderPath}/resource/transform-01/folder`\n  let targetPath = [\n    `${FolderPath}/resource/transform-01/folder/00-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/folder/01-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/folder/02-content${Path.extname(FilePath)}`\n  ]\n\n  // succeeds writing target\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath))\n  targetPath.forEach((targetPath) => test.true(FileSystem.pathExistsSync(targetPath)))\n\n  // succeeds (but writes nothing) with no change to source\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath))\n\n  // fails to overwrite as 'flag' defaults to 'wx' with changed source \n  await Touch(`${sourcePath}/02-content.pug`)\n  await test.throwsAsync(Transform.createModuleFromPath(sourcePath), { 'code': 'EEXIST'})\n\n})\n\nTest('createModuleFromPath(sourcePath, targetPath, option) using sub-folder', async (test) => {\n\n  let sourcePath = `${FolderPath}/resource/transform-01/sub-folder`\n  let targetPath = [\n    `${FolderPath}/resource/transform-01/sub-folder/folder/00-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/sub-folder/folder/01-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/sub-folder/folder/02-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/sub-folder/00-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/sub-folder/01-content${Path.extname(FilePath)}`,\n    `${FolderPath}/resource/transform-01/sub-folder/02-content${Path.extname(FilePath)}`\n  ]\n\n  // succeeds writing target\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath))\n  targetPath.forEach((targetPath) => test.true(FileSystem.pathExistsSync(targetPath)))\n\n  // succeeds (but writes nothing) with no change to source\n  await test.notThrowsAsync(Transform.createModuleFromPath(sourcePath))\n\n  // fails to overwrite as 'flag' defaults to 'wx' with changed source \n  await Touch(`${sourcePath}/folder/02-content.pug`)\n  await test.throwsAsync(Transform.createModuleFromPath(sourcePath), { 'code': 'EEXIST'})\n\n})\n"],"file":"transform-01.test.cjs"}