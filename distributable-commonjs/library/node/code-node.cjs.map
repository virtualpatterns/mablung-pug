{"version":3,"sources":["../../../source/library/node/code-node.js"],"names":["CodeNode","Node","constructor","node","option","getSource","_node","buffer","mustEscape","UnsupportedCodeTransformError","val","block","blockNode","BlockNode","_option","blockSource","isEmpty"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;;;AAEA,MAAMA,QAAN,SAAuBC,aAAvB,CAA4B;AAE1BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,UAAMD,IAAN,EAAYC,MAAZ;AACD;;AAED,QAAMC,SAAN,GAAkB;AAEhB,QAAI,KAAKC,KAAL,CAAWC,MAAf,EAAuB;AAErB,UAAI,KAAKD,KAAL,CAAWE,UAAf,EAA2B;AACzB,cAAM,IAAIC,4DAAJ,CAAkC,KAAKH,KAAvC,CAAN;AACD,OAFD,MAEO;AAEL;AAEA,eAAS;AACjB,kCAAkC,KAAKA,KAAL,CAAWI,GAAI;AACjD;AACA;AACA;AACA;AACA;AACA,oBAPQ;AASD;AAEF,KAnBD,MAmBO;AAEL,UAAI,KAAKJ,KAAL,CAAWK,KAAf,EAAsB;AAEpB,YAAIC,SAAS,GAAG,IAAIC,kBAAJ,CAAc,KAAKP,KAAL,CAAWK,KAAzB,EAAgC,KAAKG,OAArC,CAAhB;AACA,YAAIC,WAAW,GAAGH,SAAS,CAACI,OAAV,GAAoB,EAApB,GAAyB,MAAMJ,SAAS,CAACP,SAAV,EAAjD;AAEA,eAAS,IAAG,KAAKC,KAAL,CAAWI,GAAI;AACnC,sBAAsBK,WAAY;AAClC,oBAFQ;AAID,OATD,MASO;AACL,eAAO,KAAKT,KAAL,CAAWI,GAAlB;AACD;AAEF;AAEF;;AA5CyB;;eAgDbV,Q","sourcesContent":["\nimport BlockNode from './block-node.js'\nimport Node from '../node.js'\n\nimport { UnsupportedCodeTransformError } from '../error/unsupported-code-transform-error.js'\n\nclass CodeNode extends Node {\n\n  constructor(node, option) {\n    super(node, option)\n  }\n\n  async getSource() {\n\n    if (this._node.buffer) {\n\n      if (this._node.mustEscape) {\n        throw new UnsupportedCodeTransformError(this._node)\n      } else {\n        \n        // return `__utility.addNode(${this._node.val}, __node)` // ${await CodeNode.convertToHyperScript(this._node.val)}, __node)`\n\n        return  ` {\n                    let value = ${this._node.val}\n                    if (typeof value === 'string') {\n                      __utility.addNode(__utility.convertToNode(value), __node)\n                    } else {\n                      __utility.addNode(value, __node)\n                    }\n                  }`\n\n      }\n\n    } else {\n\n      if (this._node.block) {\n\n        let blockNode = new BlockNode(this._node.block, this._option)\n        let blockSource = blockNode.isEmpty ? '' : await blockNode.getSource()\n  \n        return  ` ${this._node.val} { \n                    ${blockSource}\n                  }`\n\n      } else {\n        return this._node.val\n      }\n\n    }\n\n  }\n\n}\n\nexport default CodeNode"],"file":"code-node.cjs"}